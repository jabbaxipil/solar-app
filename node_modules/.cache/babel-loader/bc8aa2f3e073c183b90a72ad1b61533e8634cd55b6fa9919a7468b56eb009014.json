{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alecc\\\\Desktop\\\\solar-app\\\\src\\\\DemoSolarApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer, Rectangle } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GOOGLE_API_KEY = \"AIzaSyB9t-BW1mYPQs71c4EzgbzsMUq_TA1h1xU\"; // Replace with your key\n\nconst DemoSolarApp = () => {\n  _s();\n  const [roofBounds, setRoofBounds] = useState(null);\n  const [panels, setPanels] = useState([]);\n  const lat = 37.7749;\n  const lon = -122.4194;\n  const zoom = 20;\n  useEffect(() => {\n    const fetchRoofData = async () => {\n      const url = `https://solar.googleapis.com/v1/dataLayers:findClosest?key=${GOOGLE_API_KEY}`;\n      try {\n        var _data$imagery;\n        const response = await fetch(url, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            location: {\n              latitude: lat,\n              longitude: lon\n            },\n            requiredQuality: \"HIGH\",\n            view: \"FULL_LAYERS\"\n          })\n        });\n        const data = await response.json();\n        if (response.ok && data !== null && data !== void 0 && (_data$imagery = data.imagery) !== null && _data$imagery !== void 0 && _data$imagery.imageryBounds) {\n          const bounds = [[data.imagery.imageryBounds.southWest.latitude, data.imagery.imageryBounds.southWest.longitude], [data.imagery.imageryBounds.northEast.latitude, data.imagery.imageryBounds.northEast.longitude]];\n          setRoofBounds(bounds);\n        } else {\n          console.error(\"Solar API error:\", data);\n        }\n      } catch (error) {\n        console.error(\"Fetch error:\", error);\n      }\n    };\n    fetchRoofData();\n  }, []);\n  const addPanel = () => {\n    if (!roofBounds) return;\n    const [southWest, northEast] = roofBounds;\n    const latStep = 0.0001;\n    const lonStep = 0.0001;\n    const newPanel = [[southWest[0] + panels.length * latStep, southWest[1]], [southWest[0] + panels.length * latStep + latStep, southWest[1] + lonStep]];\n    setPanels([...panels, newPanel]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addPanel,\n        style: {\n          backgroundColor: \"#3B82F6\",\n          color: \"white\",\n          padding: \"0.5rem 1rem\",\n          borderRadius: \"0.5rem\"\n        },\n        children: \"Add Panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [lat, lon],\n      zoom: zoom,\n      style: {\n        height: \"90vh\",\n        width: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), roofBounds && /*#__PURE__*/_jsxDEV(Rectangle, {\n        bounds: roofBounds,\n        color: \"green\",\n        weight: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), panels.map((bounds, i) => /*#__PURE__*/_jsxDEV(Rectangle, {\n        bounds: bounds,\n        color: \"orange\",\n        weight: 1\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(DemoSolarApp, \"vynQWuXcjvLUPtw2OqGfkoO53bo=\");\n_c = DemoSolarApp;\nexport default DemoSolarApp;\nvar _c;\n$RefreshReg$(_c, \"DemoSolarApp\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Rectangle","jsxDEV","_jsxDEV","GOOGLE_API_KEY","DemoSolarApp","_s","roofBounds","setRoofBounds","panels","setPanels","lat","lon","zoom","fetchRoofData","url","_data$imagery","response","fetch","method","headers","body","JSON","stringify","location","latitude","longitude","requiredQuality","view","data","json","ok","imagery","imageryBounds","bounds","southWest","northEast","console","error","addPanel","latStep","lonStep","newPanel","length","className","children","onClick","style","backgroundColor","color","padding","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","center","height","width","weight","map","i","_c","$RefreshReg$"],"sources":["C:/Users/alecc/Desktop/solar-app/src/DemoSolarApp.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer, Rectangle } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst GOOGLE_API_KEY = \"AIzaSyB9t-BW1mYPQs71c4EzgbzsMUq_TA1h1xU\"; // Replace with your key\n\nconst DemoSolarApp = () => {\n  const [roofBounds, setRoofBounds] = useState(null);\n  const [panels, setPanels] = useState([]);\n\n  const lat = 37.7749;\n  const lon = -122.4194;\n  const zoom = 20;\n\n  useEffect(() => {\n    const fetchRoofData = async () => {\n      const url = `https://solar.googleapis.com/v1/dataLayers:findClosest?key=${GOOGLE_API_KEY}`;\n\n      try {\n        const response = await fetch(url, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            location: {\n              latitude: lat,\n              longitude: lon\n            },\n            requiredQuality: \"HIGH\",\n            view: \"FULL_LAYERS\"\n          })\n        });\n\n        const data = await response.json();\n\n        if (response.ok && data?.imagery?.imageryBounds) {\n          const bounds = [\n            [\n              data.imagery.imageryBounds.southWest.latitude,\n              data.imagery.imageryBounds.southWest.longitude\n            ],\n            [\n              data.imagery.imageryBounds.northEast.latitude,\n              data.imagery.imageryBounds.northEast.longitude\n            ]\n          ];\n          setRoofBounds(bounds);\n        } else {\n          console.error(\"Solar API error:\", data);\n        }\n      } catch (error) {\n        console.error(\"Fetch error:\", error);\n      }\n    };\n\n    fetchRoofData();\n  }, []);\n\n  const addPanel = () => {\n    if (!roofBounds) return;\n    const [southWest, northEast] = roofBounds;\n    const latStep = 0.0001;\n    const lonStep = 0.0001;\n    const newPanel = [\n      [southWest[0] + panels.length * latStep, southWest[1]],\n      [southWest[0] + panels.length * latStep + latStep, southWest[1] + lonStep]\n    ];\n    setPanels([...panels, newPanel]);\n  };\n\n  return (\n    <div className=\"w-full h-screen\">\n      <div className=\"p-4\">\n        <button\n          onClick={addPanel}\n          style={{ backgroundColor: \"#3B82F6\", color: \"white\", padding: \"0.5rem 1rem\", borderRadius: \"0.5rem\" }}\n        >\n          Add Panel\n        </button>\n      </div>\n      <MapContainer center={[lat, lon]} zoom={zoom} style={{ height: \"90vh\", width: \"100%\" }}>\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n        {roofBounds && (\n          <Rectangle bounds={roofBounds} color=\"green\" weight={2} />\n        )}\n        {panels.map((bounds, i) => (\n          <Rectangle key={i} bounds={bounds} color=\"orange\" weight={1} />\n        ))}\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default DemoSolarApp;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,YAAY,EAAEC,SAAS,EAAEC,SAAS,QAAQ,eAAe;AAClE,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,cAAc,GAAG,yCAAyC,CAAC,CAAC;;AAElE,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMa,GAAG,GAAG,OAAO;EACnB,MAAMC,GAAG,GAAG,CAAC,QAAQ;EACrB,MAAMC,IAAI,GAAG,EAAE;EAEfhB,SAAS,CAAC,MAAM;IACd,MAAMiB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,MAAMC,GAAG,GAAG,8DAA8DX,cAAc,EAAE;MAE1F,IAAI;QAAA,IAAAY,aAAA;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;UAChCI,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBC,QAAQ,EAAE;cACRC,QAAQ,EAAEd,GAAG;cACbe,SAAS,EAAEd;YACb,CAAC;YACDe,eAAe,EAAE,MAAM;YACvBC,IAAI,EAAE;UACR,CAAC;QACH,CAAC,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;QAElC,IAAIb,QAAQ,CAACc,EAAE,IAAIF,IAAI,aAAJA,IAAI,gBAAAb,aAAA,GAAJa,IAAI,CAAEG,OAAO,cAAAhB,aAAA,eAAbA,aAAA,CAAeiB,aAAa,EAAE;UAC/C,MAAMC,MAAM,GAAG,CACb,CACEL,IAAI,CAACG,OAAO,CAACC,aAAa,CAACE,SAAS,CAACV,QAAQ,EAC7CI,IAAI,CAACG,OAAO,CAACC,aAAa,CAACE,SAAS,CAACT,SAAS,CAC/C,EACD,CACEG,IAAI,CAACG,OAAO,CAACC,aAAa,CAACG,SAAS,CAACX,QAAQ,EAC7CI,IAAI,CAACG,OAAO,CAACC,aAAa,CAACG,SAAS,CAACV,SAAS,CAC/C,CACF;UACDlB,aAAa,CAAC0B,MAAM,CAAC;QACvB,CAAC,MAAM;UACLG,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAET,IAAI,CAAC;QACzC;MACF,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACtC;IACF,CAAC;IAEDxB,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMyB,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAI,CAAChC,UAAU,EAAE;IACjB,MAAM,CAAC4B,SAAS,EAAEC,SAAS,CAAC,GAAG7B,UAAU;IACzC,MAAMiC,OAAO,GAAG,MAAM;IACtB,MAAMC,OAAO,GAAG,MAAM;IACtB,MAAMC,QAAQ,GAAG,CACf,CAACP,SAAS,CAAC,CAAC,CAAC,GAAG1B,MAAM,CAACkC,MAAM,GAAGH,OAAO,EAAEL,SAAS,CAAC,CAAC,CAAC,CAAC,EACtD,CAACA,SAAS,CAAC,CAAC,CAAC,GAAG1B,MAAM,CAACkC,MAAM,GAAGH,OAAO,GAAGA,OAAO,EAAEL,SAAS,CAAC,CAAC,CAAC,GAAGM,OAAO,CAAC,CAC3E;IACD/B,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAEiC,QAAQ,CAAC,CAAC;EAClC,CAAC;EAED,oBACEvC,OAAA;IAAKyC,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9B1C,OAAA;MAAKyC,SAAS,EAAC,KAAK;MAAAC,QAAA,eAClB1C,OAAA;QACE2C,OAAO,EAAEP,QAAS;QAClBQ,KAAK,EAAE;UAAEC,eAAe,EAAE,SAAS;UAAEC,KAAK,EAAE,OAAO;UAAEC,OAAO,EAAE,aAAa;UAAEC,YAAY,EAAE;QAAS,CAAE;QAAAN,QAAA,EACvG;MAED;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACNpD,OAAA,CAACJ,YAAY;MAACyD,MAAM,EAAE,CAAC7C,GAAG,EAAEC,GAAG,CAAE;MAACC,IAAI,EAAEA,IAAK;MAACkC,KAAK,EAAE;QAAEU,MAAM,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAO,CAAE;MAAAb,QAAA,gBACrF1C,OAAA,CAACH,SAAS;QAACe,GAAG,EAAC;MAAoD;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACrEhD,UAAU,iBACTJ,OAAA,CAACF,SAAS;QAACiC,MAAM,EAAE3B,UAAW;QAAC0C,KAAK,EAAC,OAAO;QAACU,MAAM,EAAE;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAC1D,EACA9C,MAAM,CAACmD,GAAG,CAAC,CAAC1B,MAAM,EAAE2B,CAAC,kBACpB1D,OAAA,CAACF,SAAS;QAASiC,MAAM,EAAEA,MAAO;QAACe,KAAK,EAAC,QAAQ;QAACU,MAAM,EAAE;MAAE,GAA5CE,CAAC;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA6C,CAC/D,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACU,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV,CAAC;AAACjD,EAAA,CAtFID,YAAY;AAAAyD,EAAA,GAAZzD,YAAY;AAwFlB,eAAeA,YAAY;AAAC,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}